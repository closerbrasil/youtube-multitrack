#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import streamlit as st
import subprocess
import json
import os
import re
import tempfile
from pathlib import Path
import shutil
import uuid
import io

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="YouTube Downloader",
    page_icon="üé¨",
    layout="centered"
)

# T√≠tulo principal
st.title("YouTube Downloader üé¨")
st.write("Baixe v√≠deos do YouTube com √°udio em portugu√™s (quando dispon√≠vel)")

# Campo para URL do v√≠deo
url_video = st.text_input("Cole aqui a URL do v√≠deo do YouTube", placeholder="https://www.youtube.com/watch?v=...")

# Fun√ß√£o para identificar os melhores formatos de v√≠deo e √°udio em pt-BR
def encontrar_formatos(url):
    try:
        # Obter informa√ß√µes detalhadas do v√≠deo
        resultado = subprocess.run(
            ["yt-dlp", "-j", url], 
            capture_output=True, 
            text=True
        )
        
        if resultado.returncode != 0:
            return None, None, None
        
        info = json.loads(resultado.stdout)
        titulo = info.get('title', 'Video')
        formatos = info.get('formats', [])
        
        # Procurar por √°udios em portugu√™s
        audios_pt = []
        for formato in formatos:
            # Verificar se √© um formato de √°udio
            if formato.get('vcodec') == 'none' and formato.get('acodec') != 'none':
                idioma = str(formato.get('language', '')).lower()
                
                # Verificar se √© portugu√™s
                if any(termo in idioma for termo in ['pt', 'br', 'portuguese']):
                    audios_pt.append(formato)
        
        # Encontrar melhor formato de v√≠deo at√© 1080p
        videos_hd = []
        for formato in formatos:
            # Verificar se √© formato de v√≠deo sem √°udio
            if formato.get('acodec') == 'none' and formato.get('vcodec') != 'none':
                altura = formato.get('height', 0)
                if isinstance(altura, int) and altura <= 1080 and altura >= 720:
                    videos_hd.append(formato)
        
        # Se encontrou formatos, ordenar por qualidade
        melhor_audio_pt = None
        if audios_pt:
            # Ordenar por bitrate/qualidade
            audios_pt.sort(key=lambda x: float(x.get('abr', 0) or 0), reverse=True)
            melhor_audio_pt = audios_pt[0]
            st.success(f"√Åudio em portugu√™s encontrado! ({melhor_audio_pt.get('format_id')})")
        
        melhor_video = None
        if videos_hd:
            # Ordenar por altura (resolu√ß√£o)
            videos_hd.sort(key=lambda x: x.get('height', 0), reverse=True)
            melhor_video = videos_hd[0]
            st.success(f"V√≠deo em alta defini√ß√£o encontrado: {melhor_video.get('height')}p")
        
        return melhor_video, melhor_audio_pt, titulo
    
    except Exception as e:
        st.error(f"Erro ao processar o v√≠deo: {str(e)}")
        return None, None, None

# M√©todo para baixar o v√≠deo e retornar os bytes
def baixar_video_direto(url, formato=None):
    try:
        # Criar um ID √∫nico para este download
        download_id = str(uuid.uuid4())
        
        # Criar diret√≥rio tempor√°rio no /tmp do sistema
        diretorio_temp = os.path.join("/tmp", download_id)
        os.makedirs(diretorio_temp, exist_ok=True)
        
        # Arquivo tempor√°rio para o download
        arquivo_temp = os.path.join(diretorio_temp, "video.mp4")
        
        # Preparar o comando
        comando = ["yt-dlp", "--merge-output-format", "mp4"]
        
        # Adicionar formato se especificado
        if formato:
            comando.extend(["-f", formato])
        else:
            comando.extend(["-f", "bestvideo[height<=1080]+bestaudio/best[height<=1080]"])
        
        # Adicionar o caminho de sa√≠da e a URL
        comando.extend(["-o", arquivo_temp, url])
        
        # Executar o download (sem capturar stdout para permitir progresso)
        processo = subprocess.run(comando, check=True)
        
        # Verificar se o arquivo existe
        if os.path.exists(arquivo_temp):
            # Ler o arquivo em mem√≥ria
            with open(arquivo_temp, "rb") as f:
                conteudo = f.read()
            
            # Limpar o diret√≥rio tempor√°rio
            shutil.rmtree(diretorio_temp, ignore_errors=True)
            
            return conteudo
        else:
            st.error(f"Arquivo n√£o encontrado ap√≥s download: {arquivo_temp}")
            return None
    except subprocess.CalledProcessError as e:
        st.error(f"Erro ao baixar v√≠deo: {e}")
        return None
    except Exception as e:
        st.error(f"Erro inesperado: {e}")
        return None

# Quando o usu√°rio colar a URL
if url_video:
    # Verificar se √© uma URL v√°lida do YouTube
    if "youtube.com" not in url_video and "youtu.be" not in url_video:
        st.error("Por favor, insira uma URL v√°lida do YouTube.")
    else:
        # Bot√£o para iniciar o download
        if st.button("Baixar V√≠deo", type="primary"):
            # Etapa 1: Analisar os formatos dispon√≠veis
            with st.spinner("Analisando formatos dispon√≠veis..."):
                video, audio_pt, titulo = encontrar_formatos(url_video)
                
                if not titulo:
                    st.error("N√£o foi poss√≠vel processar o v√≠deo. Tente novamente.")
                else:
                    # Nome seguro para o arquivo
                    nome_seguro = re.sub(r'[^\w\-\. ]', '_', titulo)
                    nome_arquivo = f"{nome_seguro}.mp4"
                    
                    # Definir o formato para download
                    formato_download = None
                    if video and audio_pt:
                        formato_download = f"{video['format_id']}+{audio_pt['format_id']}"
                        st.info(f"Baixando v√≠deo {video.get('height', '')}p com √°udio em portugu√™s")
                    else:
                        st.info("Usando configura√ß√£o padr√£o para o download")
                    
                    # Etapa 2: Baixar o v√≠deo
                    with st.spinner(f"Baixando '{titulo}'..."):
                        # Mostrar barra de progresso indeterminada
                        progress_bar = st.progress(0)
                        
                        # Tentar o download direto
                        video_bytes = baixar_video_direto(url_video, formato_download)
                        
                        if video_bytes:
                            # Download conclu√≠do
                            progress_bar.progress(1.0)
                            st.success("Download conclu√≠do!")
                            
                            # Mostrar o tamanho do arquivo
                            tamanho_mb = len(video_bytes) / (1024 * 1024)
                            st.info(f"Tamanho do arquivo: {tamanho_mb:.1f} MB")
                            
                            # Oferecer o bot√£o de download
                            st.download_button(
                                label=f"üíæ Salvar '{nome_arquivo}'",
                                data=video_bytes,
                                file_name=nome_arquivo,
                                mime="video/mp4"
                            )
                        else:
                            st.error("N√£o foi poss√≠vel baixar o v√≠deo. Tente novamente.")
                            
                            # Tentar m√©todo alternativo mais simples
                            st.warning("Tentando m√©todo alternativo...")
                            try:
                                with st.spinner("√öltimo m√©todo de tentativa..."):
                                    # Usar o formato mais simples poss√≠vel
                                    video_bytes_alt = baixar_video_direto(url_video, "best")
                                    
                                    if video_bytes_alt:
                                        st.success("Download conclu√≠do com m√©todo alternativo!")
                                        
                                        # Oferecer para download
                                        st.download_button(
                                            label=f"üíæ Salvar '{nome_arquivo}'",
                                            data=video_bytes_alt,
                                            file_name=nome_arquivo,
                                            mime="video/mp4"
                                        )
                            except Exception as e:
                                st.error(f"Todos os m√©todos de download falharam: {e}")

# Adicionar informa√ß√µes no rodap√©
st.markdown("---")
st.markdown("**Nota:** Esta aplica√ß√£o baixa v√≠deos do YouTube com a melhor qualidade at√© 1080p e seleciona automaticamente o √°udio em portugu√™s, quando dispon√≠vel.")
st.markdown("Desenvolvido com ‚ù§Ô∏è usando Streamlit e yt-dlp.") 